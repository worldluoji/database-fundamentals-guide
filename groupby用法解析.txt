CREATE TABLE `student` (
  `ID` int(11) NOT NULL auto_increment,
  `STU_NUM` int(11) DEFAULT NULL,
  `GRADE` VARCHAR(30),
  `CLASS` VARCHAR(30),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;

insert into student(STU_NUM, GRADE, CLASS) values(10001, 'gradeA', 'classA');
insert into student(STU_NUM, GRADE, CLASS) values(10002, 'gradeA', 'classA');
insert into student(STU_NUM, GRADE, CLASS) values(10003, 'gradeA', 'classC');
insert into student(STU_NUM, GRADE, CLASS) values(10004, 'gradeA', 'classA');
insert into student(STU_NUM, GRADE, CLASS) values(10005, 'gradeA', 'classB');
insert into student(STU_NUM, GRADE, CLASS) values(10006, 'gradeA', 'classB');
insert into student(STU_NUM, GRADE, CLASS) values(10007, 'gradeA', 'classB');
insert into student(STU_NUM, GRADE, CLASS) values(10007, 'gradeB', 'classA');

group by的常规用法是配合聚合函数，利用分组信息进行统计，常见的是配合max等聚合函数筛选数据后分析，以及配合having进行筛选后过滤。
 select min(stu_num),class from student group by class;
+--------------+--------+
| min(stu_num) | class  |
+--------------+--------+
|        10001 | classA |
|        10003 | classC |
|        10005 | classB |
+--------------+--------+
即查询每种class中学号最小的那个，分类输出。

使用having则可以加入过滤条件
select min(stu_num),class from student group by class having class > 'classA'
+--------------+--------+
| min(stu_num) | class  |
+--------------+--------+
|        10003 | classC |
|        10005 | classB |
+--------------+--------+

结论
当group by 与聚合函数配合使用时，功能为分组后计算
当group by 与having配合使用时，功能为分组后过滤
当group by 与聚合函数，同时非聚合字段同时使用时，非聚合字段的取值是第一个匹配到的字段内容，即id小的条目对应的字段内容。